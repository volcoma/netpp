shallow_clone: false

clone_folder:
  C:\projects\project

environment:
  matrix:
  - COMPILER: MINGW_W64_5_3
    ARCHITECTURE: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
  - COMPILER: MINGW_W64_6_3
    ARCHITECTURE: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
  - COMPILER: MINGW_W64_6_3
    ARCHITECTURE: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
  - COMPILER: MINGW_W64_7_2
    ARCHITECTURE: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - COMPILER: MSVC_15
    ARCHITECTURE: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - COMPILER: MSVC_15
    ARCHITECTURE: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
  - COMPILER: MSVC_14
    ARCHITECTURE: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
  - COMPILER: MSVC_14
    ARCHITECTURE: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015


build:
  verbosity: detailed
  parallel: true

install:
  #######################################################################################
  # All external dependencies are installed in C:\projects\deps
  #######################################################################################
  - mkdir C:\projects\deps
  - cd C:\projects\deps

  #######################################################################################
  # Install Ninja
  #######################################################################################
  - set NINJA_URL="https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-win.zip"
  - appveyor DownloadFile %NINJA_URL% -FileName ninja.zip
  - 7z x ninja.zip -oC:\projects\deps\ninja > nul
  - set PATH=C:\projects\deps\ninja;%PATH%
  - ninja --version

  #######################################################################################
  # Install MinGW
  #######################################################################################
  #- IF "%COMPILER%" == "MINGW_W64" appveyor-retry appveyor DownloadFile http://downloads.sourceforge.net/mingw-w64/x86_64-5.3.0-release-posix-seh-rt_v4-rev0.7z
  #- IF "%COMPILER%" == "MINGW_W64_5_3" 7z x C:\mingw-w64\i686-5.3.0-posix-dwarf-rt_v4-rev0.7z -oc:\ > nul
  #- IF "%COMPILER%" == "MINGW_W64_6_3" 7z x C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1.7z -oc:\ > nul
  #- IF "%COMPILER%" == "MINGW_W64_7_2" 7z x C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1.7z -oc:\ > nul

  #######################################################################################
  # CMake
  #######################################################################################
  - cmake --version


before_build:
  - cmd: cd C:\projects\project
  - IF "%ARCHITECTURE%" == "x86" IF "%COMPILER%" == "MSVC_15"
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
  - IF "%ARCHITECTURE%" == "x64" IF "%COMPILER%" == "MSVC_15" 
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - IF "%ARCHITECTURE%" == "x86" IF "%COMPILER%" == "MSVC_14"
    call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - IF "%ARCHITECTURE%" == "x64" IF "%COMPILER%" == "MSVC_14"
    call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
  - IF "%ARCHITECTURE%" == "x64" IF "%COMPILER%" == "MSVC_14"
    call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
  - IF "%ARCHITECTURE%" == "x86" IF "%COMPILER%" == "MINGW_W64_5_3"
    set PATH=C:\mingw-w64\i686-5.3.0-posix-dwarf-rt_v4-rev0\mingw32\bin;%PATH%
  - IF "%ARCHITECTURE%" == "x86" IF "%COMPILER%" == "MINGW_W64_6_3"
    set PATH=C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin;%PATH%
  - IF "%ARCHITECTURE%" == "x64" IF "%COMPILER%" == "MINGW_W64_6_3"
    set PATH=C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin;%PATH%
  - IF "%ARCHITECTURE%" == "x64" IF "%COMPILER%" == "MINGW_W64_7_2"
    set PATH=C:\mingw-w64\x86_64-7.2.0-posix-seh-rt_v5-rev1\mingw64\bin;%PATH%

#######################################################################################
# we can use Ninja for all configurations
#######################################################################################
build_script:
  - git submodule update --init
  - mkdir build
  - cd build
  - cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_HPP_TESTS=ON ..
  - cmake --build .
